nombres <- c(0, 1, 2, 3, 4, 5, 6, 7)
nombres[1]
nombres[2]
nombres[3]
# Este vector contiene los litros de cerveza de la escala
nombres <- c(0, 1, 2, 3, 4, 5, 6, 7)
frecuencias <- c(6, 10, 16, 23, 33, 40, 46, 50)
muestra <- c()
for (n in length(nombres)){
for (x in c(1:frecuencias[n])) {
muestra <- c(muestra , nombres[n])
}
}
muestra
# Este vector contiene los litros de cerveza de la escala
nombres <- c(0, 1, 2, 3, 4, 5, 6, 7)
frecuencias <- c(6, 10, 16, 23, 33, 40, 46, 50)
muestra <- c()
for (n in c(1:length(nombres))){
for (x in c(1:frecuencias[n])) {
muestra <- c(muestra , nombres[n])
}
}
muestra
# Este vector contiene los litros de cerveza de la escala
nombres <- c(0, 1, 2, 3, 4, 5, 6, 7)
frecuencias <- c(6, 10, 16, 23, 33, 40, 46, 50)
crear_muestra <- function(valores,frecuencias){
muestra <- c()
for (n in c(1:length(valores))){
for (x in c(1:frecuencias[n])) {
muestra <- c(muestra , valores[n])
}
}
return(muestra)
}
mi_muestra <- crear_muestra(valores = nombres,frecuencias = frecuencias)
mi_muestra
mi_muestra2 <- crear_muestra(nombres,frecuencias)
mi_muestra[0]
valores6 <- c(0, 1, 2, 3, 4, 5, 6, 7)
f_acu6 <- c(6, 10, 16, 23, 33, 40, 46, 50)
f_abs6 <- c()
for (n in c(1:length(f_acu6))) {
f_abs6 <- c(f_abs6, f_acu6[n] - f_acu[n - 1])
}
for (n in c(1:length(f_acu6))) {
f_abs6 <- c(f_abs6, f_acu6[n] - f_acu6[n - 1])
}
f_abs6
# valores de la variable
nombres6 <- c(0, 1, 2, 3, 4, 5, 6, 7)
# frecuencias acumulada
fa6 <- c(6, 10, 16, 23, 33, 40, 46, 50)
# frecuencias absolutas
f6 <- acu_a_abs(fa6)
# Frecuencias relativas
fr6 <- f6 / margin.table(f6)
# Frecuencias relativas absolutas
fra6 <- cumsum(fr6)
# Esta es un función para crear las muestras a partir de los valores y sus frecuencias.
crear_muestra <- function(valores,frecuencias){
muestra <- c()
for (n in c(1:length(valores))){
for (x in c(1:frecuencias[n])) {
muestra <- c(muestra , valores[n])
}
}
return(muestra)
}
# Esta función sirve para obtener la frecuencia absuluta de la frecuencia acumulada
acu_a_abs <- function(f_acu){
f_abs <- c()
for (n in c(1:length(f_acu))) {
if (n == 1){
f_abs <- c(f_abs, f_acu[n])
}else {
f_abs <- c(f_abs, f_acu[n] - f_acu[n - 1])
}
}
return(f_abs)
}
# Función de la moda, con una ditribucion muestral
moda_fun <- function(x) {
return(as.numeric(names(which.max(table(x)))))
}
# Función del calculo de la covarianza
cv <- function(x, y) {return(as.numeric(x / y * 100))}
install.packages("ggplot2")
library(ggplot2)
# valores de la variable
nombres6 <- c(0, 1, 2, 3, 4, 5, 6, 7)
# frecuencias acumulada
fa6 <- c(6, 10, 16, 23, 33, 40, 46, 50)
# frecuencias absolutas
f6 <- acu_a_abs(fa6)
# Frecuencias relativas
fr6 <- f6 / margin.table(f6)
# Frecuencias relativas absolutas
fra6 <- cumsum(fr6)
t6 <- cbind(nombres6, f6, fa6, fr6, fra6)
rownames(tabla) <- nombres6
mediana6 <- median(6)
mediana6
df6 = data.frame(m6)
m6 <- crear_muestra(nombres6, f6)
"El valor de la media es:"
media6 <- mean(m6)
media6
"El valor de la moda es:"
moda6 <- moda_fun(m6)
moda6
"El valor de la mediana es:"
mediana6 <- median(6)
mediana6
df6 = data.frame(m6)
library(ggplot2)
ggplot(df6)
ggplot(df6) +
geombar()
ggplot(df6) +
geom_bar()
install.packages(c("cli", "lifecycle", "tidyr"))
install.packages(c("cli", "lifecycle", "tidyr"))
install.packages(c("cli", "lifecycle", "tidyr"))
install.packages(c("cli", "lifecycle", "tidyr"))
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("cli")
# Esta es un función para crear las muestras a partir de los valores y sus frecuencias.
crear_muestra <- function(valores,frecuencias){
muestra <- c()
for (n in c(1:length(valores))){
for (x in c(1:frecuencias[n])) {
muestra <- c(muestra , valores[n])
}
}
return(muestra)
}
# Esta función sirve para obtener la frecuencia absuluta de la frecuencia acumulada
acu_a_abs <- function(f_acu){
f_abs <- c()
for (n in c(1:length(f_acu))) {
if (n == 1){
f_abs <- c(f_abs, f_acu[n])
}else {
f_abs <- c(f_abs, f_acu[n] - f_acu[n - 1])
}
}
return(f_abs)
}
# Función de la moda, con una ditribucion muestral
moda_fun <- function(x) {
return(as.numeric(names(which.max(table(x)))))
}
# Función del calculo de la covarianza
cv <- function(x, y) {return(as.numeric(x / y * 100))}
install.packages("ggplot2")
library(ggplot2)
# valores de la variable
nombres6 <- c(0, 1, 2, 3, 4, 5, 6, 7)
# frecuencias acumulada
fa6 <- c(6, 10, 16, 23, 33, 40, 46, 50)
# frecuencias absolutas
f6 <- acu_a_abs(fa6)
# Frecuencias relativas
fr6 <- f6 / margin.table(f6)
# Frecuencias relativas absolutas
fra6 <- cumsum(fr6)
t6 <- cbind(nombres6, f6, fa6, fr6, fra6)
rownames(tabla) <- nombres6
t6
# valores de la variable
nombres6 <- c(0, 1, 2, 3, 4, 5, 6, 7)
# frecuencias acumulada
fa6 <- c(6, 10, 16, 23, 33, 40, 46, 50)
# frecuencias absolutas
f6 <- acu_a_abs(fa6)
# Frecuencias relativas
fr6 <- f6 / margin.table(f6)
# Frecuencias relativas absolutas
fra6 <- cumsum(fr6)
t6 <- cbind(nombres6, f6, fa6, fr6, fra6)
rownames(t6) <- nombres6
t6
m6 <- crear_muestra(nombres6, f6)
"El valor de la media es:"
media6 <- mean(m6)
media6
"El valor de la moda es:"
moda6 <- moda_fun(m6)
moda6
"El valor de la mediana es:"
mediana6 <- median(6)
mediana6
df6 = data.frame(m6)
library(ggplot2)
ggplot(df6, aes) +
geom_bar()
ggplot(df6, aes(x = cat)) +
geom_bar()
ggplot(df6, aes(x = "cat")) +
geom_bar()
ggplot(df6, aes(x = "cat", y = "Frecuencia")) +
geom_bar(stat = "identity")
ggplot(df6, aes(x = grupo, y = n)) +
geom_bar(stat = "identity")
ggplot(df6, aes(x = nombres6, y = n)) +
geom_bar(stat = "identity")
datos <- data.frame(Sexo=c(rep(1,435), rep(2, 335)),  stringsAsFactors = FALSE)
ggplot(datos,aes(x=Sexo)) +
geom_bar(fill="darkorchid4",color="black") +
labs(title="SEXO - INGRESANTES 2015",x="Sexo",y="Frecuencia") +
stat_count(aes(y=..count..,label=..count..),geom="text",vjust=-1) +
coord_cartesian(ylim=c(-1,500))
datos
df6 <- data.frame(m6)
library(ggplot2)
ggplot(df6, aes(x = nombres6, y = n)) +
geom_bar(stat = "identity")
ggplot(df6, aes(x = m6)) +
geom_bar(stat = "identity")
ggplot(df6, aes(x = hola)) +
geom_bar(stat = "identity") +
stat_count(aes(y=..count..,label=..count..),geom="text",vjust=-1)
ggplot(df6, aes(x = hola)) +
geom_bar() +
stat_count(aes(y=..count..,label=..count..),geom="text",vjust=-1)
df6 <- data.frame(hola = m6)
library(ggplot2)
ggplot(df6, aes(x = hola)) +
geom_bar() +
stat_count(aes(y=..count..,label=..count..),geom="text",vjust=-1)
ggplot(df6, aes(x = hola)) +
geom_bar() +
#  stat_count(aes(y=..count..,label=..count..),geom="text",vjust=-1)
datos <- data.frame(Sexo=c(rep(1,435), rep(2, 335)),  stringsAsFactors = FALSE)
ggplot(df6, aes(x = hola)) +
geom_bar()
ggplot(df6, aes(x = hola)) +
geom_bar()
install.packages(readxl)
install.packages("readxl")
install.packages("rtools")
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
base_de_datos
library(readxl)
library(ggplot2)
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
base_de_datos
library(readxl)
library(ggplot2)
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
base_de_datos
modelo <- base_de_datos["cilndrada"]
modelo <- base_de_datos["cilindrada"]
mean(base_de_datos["cilindrada"])
mean(modelo)
library(tidyverse)
modelo <- pull(base_de_datos, modelo)
media <- mean(modelo)
media
mediana <- median(modelo)
mediana
desviacion_estandar <- var(modelo) ^ 0.5
desviacion_estandar
library(readxl)
library(ggplot2)
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
library(dplyr)
library(tidyr)
g1 <- ggplot(base_de_datos, aes(marca, modelo))
g1 + geom_point()
g1 + geom_point() +
geom_vline(pegueot)
g1 + geom_point() +
geom_vline(peugeot)
g1 + geom_col()
g1 + geom_line()
g1 + geom_hex()
library(tidyverse)
detach("package:stats", unload = TRUE)
detach("package:tidyverse", unload = TRUE)
library(tidyverse)
modelo_tabla <- select(base_de_datos, modelo)
modelo <- pull(base_de_datos, modelo)
media <- mean(modelo)
media <- mean(modelo_tabla)
media <- mean(modelo)
media
tmodelo <- table(modelo_tabla)
media <- mean(tmodelo)
media
modelo <- pull(base_de_datos, modelo)
media <- mean(modelo)
media
mediana <- median(modelo)
mediana
desviacion_estandar <- var(modelo) ^ 0.5
mediana <- median(modelo)
library(stats, lib.loc = "C:/Program Files/R/R-4.2.1/library")
mediana <- median(modelo)
mediana
desviacion_estandar <- var(modelo) ^ 0.5
desviacion_estandar
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
base_de_datos
library(readxl)
library(ggplot2)
base_de_datos <- read_excel("../base_de_datos_tp3.xlsx")
base_de_datos
# Ejercicio a.1: Grafico barplot variable modelo de auto
ggplot(base_de_datos, aes(x = modelo)) +
geom_bar() +
ylab("Frecuencias absolutas") +
ggtitle("Grafico de barras")
# Ejercicio a.2: Barplot con colores
ggplot(base_de_datos, aes(x = modelo)) +
geom_bar(color = "blue", fill = "red") +
ylab("Frecuencias absolutas") +
ggtitle("Grafico de barras")
# Ejercicio a.3: Barplot con las cordenadas invertidas
ggplot(base_de_datos, aes(x = modelo)) +
geom_bar(color = "blue", fill = "red") +
ylab("Frecuencias absolutas") +
ggtitle("Grafico de barras") +
coord_flip()
# Ejercicio a.4: por distintos colores
ggplot(base_de_datos, aes(x = modelo, fill = as.factor(modelo))) +
geom_bar() +
ylab("Frecuencias absolutas") +
ggtitle("Grafico de barras") +
labs(fill = "modelo")
# Ejercicio b.1: Histograma con rango 0 a 2
ggplot(base_de_datos) +
geom_histogram(binwidth = 2, aes(x = modelo), fill = "steelblue") +
xlab("Modelo") +
ylab("Frecuencias") +
ggtitle("Histograma con rango 0 a 2") +
theme_minimal()
# Ejercicio b.2: Histograma usando cortes
ggplot(base_de_datos) +
geom_histogram(binwidth = 1, aes(x = modelo, fill = marca)) +
xlab("Modelo") +
ylab("Frecuencias") +
ggtitle("Histograma con cortes") +
theme_minimal()
# Ejercicio b.3: Histograma usando la varible cilindrada
ggplot(base_de_datos) +
geom_histogram(binwidth = 0.1, aes(x = cilindrada)) +
xlab("Cilindrada") +
ylab("Frecuencia") +
ggtitle("Histograma usando la variable cilindrada") +
theme_minimal()
# Ejercicio c: Grafico de dispersion de puntos
ggplot(base_de_datos, aes(marca, modelo)) +
geom_point() +
xlab("Marca") +
ylab("Modelo") +
ggtitle("Grafico de dispersion de puntos") +
theme_minimal()
ggplot(diamonds) +
geom_histogram(aes(x = cut)) +
xlab("Cilindrada") +
ylab("Frecuencia") +
ggtitle("Histograma usando la variable cut") +
theme_minimal()
# Ejercicio b.4: histograma usando la variable cut
base <- diamonds
ggplot(base) +
geom_histogram(binwidth = 0.1, aes(x = cut)) +
xlab("Cilindrada") +
ylab("Frecuencia") +
ggtitle("Histograma usando la variable cut") +
theme_minimal()
ggplot(diamonds) +
geom_histogram(binwidth = 0.1, aes(x = cut)) +
xlab("Cilindrada") +
ylab("Frecuencia") +
ggtitle("Histograma usando la variable cut") +
theme_minimal()
